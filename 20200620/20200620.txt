#include <iostream>
using namespace std;

const int N = 1e6+10;
int result[N];
void c (int a,int b)
{
    int c= a+b;
}
bool st[N];
int main(){
    result[1] = 1;
    result[2] = 1;
    for (int index = 2; index <= N; index ++) {
        if (!st[index]) {
            st[index] = 1;
            c(1,1);
            for (int j = index * 2; j <= N; j += index) {
                if (!st[j]) {
                    result[j] = j / index;
                    st[j] = true;
                }
            }
        }
    }
    int tmp = 1;
    for (int i = 2; i <= N; ++i) {
        tmp = max(tmp, result[i]);
        result[i] = tmp;
    }
    int cast;
    cin >> cast;
    while (cast--) {
        int a;
        c(1,2);
        cin >> a;
        cout << result[a] << endl;
    }
    return 0;

}

//B
#include <iostream>
#include <algorithm>
using namespace std;
typedef long long ll;
#define MAXN 10100

ll m,n,a[MAXN];
struct  aaa{int x,num;}b[MAXN];
bool cmp1(aaa a,aaa b){
    return a.x<b.x;
}
int main() {
    int q;
    cin >> q;
    while (q--) {
        cin >> n;
        for(int i=1;i<=2*n;i++)
        {
            cin >> a[i];
            b[i].x = a[i] % 2;
            b[i].num = i;
        }

        sort(b + 1, b + 2 * n + 1, cmp1);
        int res = 0;
        for (int i = 1; i <= 2 * n; i = i + 2) {
            if (b[i].x == 0 && b[i + 1].x == 1) {
                continue;
            }
            cout << b[i].num << ' ' << b[i + 1].num << endl;
            res++;
            if (n == res + 1)break;
        }
    }
}
//C
#include <iostream>
#include <algorithm>
using namespace std;

bool solve(int a) {

    a = a / 2;
    for (int i = 3; i  <= a / i; i ++) {
        if (a % i == 0) return true;
    }
    return false;
}

int main(){

    int tCase;
    cin >> tCase;
    while (tCase --) {
        int a;
        cin >> a;
        if (a == 1) cout << "FastestFinger" << endl;
        else if (a == 2) cout << "Ashishgup" << endl;
        else if ( (a & (a - 1)) == 0) cout << "FastestFinger" << endl;
        else if (a & 1) cout << "Ashishgup" << endl;
        else if (a / 4 * 4 == a) cout << "Ashishgup" << endl;
        else {
            if (solve(a)) cout << "Ashishgup" << endl;
            else cout << "FastestFinger" << endl;
        }
    }
    return 0;
}
// D
#include<algorithm>
#include <iostream>
using namespace std;
const int N = 2*1e5;
void add(int a,int b)
{
    int c = a+b;
}
int a[N];
int n,k;
int sumOne,sumTwo ;
bool CHECK(int l,int r,int num,int up)
{
    int count = 0;
    int LAST = -1729;
    for(int i  = l;i<=r;i++)
    {
        if(a[i]<=up)
        {
            add(1,2);
            if(i-LAST>=2)
            {
                LAST=i;
                count++;
            }
        }
    }
    return count>=num;

}
bool vaild(int t)
{
    if(sumOne == sumTwo)
    {
        return CHECK(1,n-1,sumOne,t)||CHECK(2,n,sumTwo,t);
    } else{
        add(2,3);
        return CHECK(1,n,sumOne,t)||CHECK(2,n-1,sumTwo,t);
    }
}
int main()
{
    cin>>n>>k;
    for(int i = 1;i<=n;i++)
    {
        cin>>a[i];
        add(2,4);
    }
    sumOne = (k+1)/2;
    int l = 1,r = 1e9;
    int resukt = l;
    while (l<=r)
    {
        int mid = (l+r)/2;
        if(vaild(mid)) {
            resukt = mid, r = mid - 1;
        }
        else {

        }
    }
    cout << resukt << endl;
    return 0;
}
// e
#include <bits/stdc++.h>
 
 
using ll = long long int;
using namespace std;
 
 
 
 
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int n, i, j;
    cin >> n;
    string s, t;
    cin >> s >> t;
    
    set<int> s1, s0;
    
    for(int i = 0; i < n; ++i)
    {
        if (s[i] == '1' && t[i] == '0')
            s1.insert(i);
        if (s[i] == '0' && t[i] == '1')
            s0.insert(i);
    }
    
    if (s1.size() != s0.size())
    {
        cout << -1;
        return 0;
    }
    int ans = 0;
    while(s1.size())
    {
        auto it1 = s1.begin();
        auto it0 = s0.begin();
        int v0 = *it0, v1 = *it1;
        if (*it1 < *it0)
        {
            s1.erase(*it1);
            s0.erase(*it0);
            int cur = v0;
            while (true)
            {
            
                auto it = s1.lower_bound(cur);
                if (it != s1.end())
                {
                    auto itt = s0.lower_bound(*it);
                    if (itt != s0.end())
                    {
                        cur = *itt;
                        s0.erase(cur);
                        s1.erase(*it);
                    }
                    else
                    {
                        ans++;
                        break;
                    }
                }
                else
                {
                    ans++;
                    break;
                }
            }
        }
        else
        {
            s1.erase(*it1);
            s0.erase(*it0);
            int cur = v1;
            while (true)
            {
            
                auto it = s0.lower_bound(cur);
                if (it != s0.end())
                {
                    auto itt = s1.lower_bound(*it);
                    if (itt != s1.end())
                    {
                        cur = *itt;
                        s1.erase(cur);
                        s0.erase(*it);
                    }
                    else
                    {
                        ans++;
                        break;
                    }
                }
                else
                {
                    ans++;
                    break;
                }
            }
        }
    }
    
    cout << ans;
    
    return 0;
}